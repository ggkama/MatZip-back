/* ======================================================
   1.  회원 테이블
   ====================================================== */
CREATE TABLE TB_USER (
    USER_NO        NUMBER          CONSTRAINT PK_TB_USER PRIMARY KEY,
    USER_ID        VARCHAR2(50)    NOT NULL,
    USER_PW        VARCHAR2(150)   NOT NULL,
    USER_NAME      VARCHAR2(18)    NOT NULL,
    USER_NICKNAME  VARCHAR2(30)    NOT NULL,
    USER_PHONE     CHAR(13)        NOT NULL,
    USER_ROLE      VARCHAR2(20)    DEFAULT 'USER' NOT NULL,
    IS_DELETED     CHAR(1)         DEFAULT 'N' NOT NULL,
    ENROLL_DATE    DATE            DEFAULT SYSDATE NOT NULL,
    MODIFIED_DATE  DATE            DEFAULT SYSDATE NOT NULL
);

CREATE TABLE TB_TOKEN (
    TOKEN_NO        NUMBER             CONSTRAINT PK_TB_TOKEN PRIMARY KEY,
    USER_NO         NUMBER             NOT NULL,
    REFRESH_TOKEN   VARCHAR2(255)      NOT NULL,
    EXPIRED_DATE    NUMBER             NOT NULL,
    CONSTRAINT FK_TOKEN_USER FOREIGN KEY (USER_NO) REFERENCES TB_USER(USER_NO)
);

CREATE TABLE TB_PROFILE_IMAGE (
    USER_NO     NUMBER             CONSTRAINT PK_TB_PROFILE_IMAGE PRIMARY KEY,
    IMAGE_URL   VARCHAR2(300)      NOT NULL,
    CONSTRAINT FK_PROFILE_USER FOREIGN KEY (USER_NO) REFERENCES TB_USER(USER_NO)
);

CREATE TABLE TB_OAUTH_USER (
    OAUTH_NO        NUMBER             CONSTRAINT PK_TB_OAUTH_USER PRIMARY KEY,
    USER_NO         NUMBER             NOT NULL,
    USER_ID         NUMBER             NOT NULL,
    PROVIDER        VARCHAR2(50)       NOT NULL,
    PROVIDER_ID     VARCHAR2(50)       NOT NULL,
    EMAIL           VARCHAR2(50)       NOT NULL,
    USER_NICKNAME   VARCHAR2(20)       NOT NULL,
    ENROLL_DATE     DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT FK_OAUTH_USER FOREIGN KEY (USER_NO) REFERENCES TB_USER(USER_NO)
);

CREATE TABLE TB_OWNER (
    REGISTER_NO     NUMBER              CONSTRAINT PK_TB_OWNER PRIMARY KEY,
    USER_NO         NUMBER              NOT NULL,
    BUSINESS_NO     VARCHAR2(12)        NOT NULL,
    STORE_NAME      VARCHAR2(100)       NOT NULL,
    IMAGE           VARCHAR2(300)       NOT NULL,
    REQUEST_DATE    DATE DEFAULT SYSDATE NOT NULL,
    STATUS          CHAR(1) DEFAULT 'N' NOT NULL,
    CONSTRAINT FK_OWNER_USER FOREIGN KEY (USER_NO) REFERENCES TB_USER(USER_NO)
);

/* ======================================================
   2.  가게 테이블
   ====================================================== */
CREATE TABLE TB_STORE (
    STORE_NO            NUMBER              CONSTRAINT PK_TB_STORE PRIMARY KEY,
    USER_NO             NUMBER              NOT NULL,
    STORE_NAME          VARCHAR2(100)       NOT NULL,
    STORE_PHONE         CHAR(15)            NOT NULL,
    STORE_ADDRESS_1     VARCHAR2(200)       NOT NULL,
    STORE_ADDRESS_2     VARCHAR2(50)        NOT NULL,
    CATEGORY_ADDRESS    VARCHAR2(20)        NOT NULL,
    CATEGORY_FOODTYPE   VARCHAR2(20)        NOT NULL,
    OPEN_TIME           VARCHAR2(20)        NOT NULL,
    CLOSE_TIME          VARCHAR2(20)        NOT NULL,
    CREATE_DATE         DATE DEFAULT SYSDATE NOT NULL,
    MODIFIED_DATE       DATE DEFAULT SYSDATE NOT NULL,
    IS_DELETED          CHAR(1) DEFAULT 'N' NOT NULL,
    COUNT               NUMBER              NOT NULL,
    CONSTRAINT FK_STORE_USER FOREIGN KEY (USER_NO) REFERENCES TB_USER(USER_NO)
);

CREATE TABLE TB_STORE_IMAGE (
    IMAGE_NO    NUMBER              CONSTRAINT PK_TB_STORE_IMAGE PRIMARY KEY,
    STORE_NO    NUMBER              NOT NULL,
    IMAGE       VARCHAR2(300)       NOT NULL,
    CONSTRAINT FK_STIMG_STORE FOREIGN KEY (STORE_NO) REFERENCES TB_STORE(STORE_NO)
);

CREATE TABLE TB_MENU (
    MENU_NO     NUMBER              CONSTRAINT PK_TB_MENU PRIMARY KEY,
    STORE_NO    NUMBER              NOT NULL,
    MENU        VARCHAR2(30)        NOT NULL,
    CONSTRAINT FK_MENU_STORE FOREIGN KEY (STORE_NO) REFERENCES TB_STORE(STORE_NO)
);

CREATE TABLE TB_CONVENIENCE (
    CONVENIENCE_NO NUMBER           CONSTRAINT PK_TB_CONVENIENCE PRIMARY KEY,
    STORE_NO       NUMBER           NOT NULL,
    CONVENIENCE    VARCHAR2(50)     NOT NULL,
    CONSTRAINT FK_CONV_STORE FOREIGN KEY (STORE_NO) REFERENCES TB_STORE(STORE_NO)
);

CREATE TABLE TB_OFF_DAY (
    STORE_NO    NUMBER              NOT NULL,
    OFF_DAY     VARCHAR2(10)        NOT NULL,
    CONSTRAINT PK_TB_OFF_DAY PRIMARY KEY (STORE_NO, OFF_DAY),
    CONSTRAINT FK_OFFDAY_STORE FOREIGN KEY (STORE_NO) REFERENCES TB_STORE(STORE_NO)
);

CREATE TABLE TB_SHUT_DOWN_DAY (
    DAY_NO          NUMBER          CONSTRAINT PK_TB_SHUT_DOWN_DAY PRIMARY KEY,
    STORE_NO        NUMBER          NOT NULL,
    SHUT_DOWN_DAY   DATE            NOT NULL,
    CONSTRAINT FK_SHUT_STORE FOREIGN KEY (STORE_NO) REFERENCES TB_STORE(STORE_NO)
);

/* ======================================================
   3. 예약 & 리뷰 테이블
   ====================================================== */
CREATE TABLE TB_RESERVATION (
    RESERVATION_NO      NUMBER          CONSTRAINT PK_TB_RESERVATION PRIMARY KEY,
    USER_NO             NUMBER          NOT NULL,
    STORE_NO            NUMBER          NOT NULL,
    RESERVATION_DATE    DATE DEFAULT SYSDATE NOT NULL,
    RESERVATION_TIME    VARCHAR2(30)    NOT NULL,
    PERSON_COUNT        NUMBER          NOT NULL,
    CREATED_DATE        DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT FK_RSV_USER FOREIGN KEY (USER_NO) REFERENCES TB_USER(USER_NO),
    CONSTRAINT FK_RSV_STORE FOREIGN KEY (STORE_NO) REFERENCES TB_STORE(STORE_NO)
);

CREATE TABLE TB_RESERVATION_CANCEL (
    RESERVATION_NO      NUMBER          CONSTRAINT PK_TB_RESERVATION_CANCEL PRIMARY KEY,
    CANCEL_REASON       VARCHAR2(300)   NOT NULL,
    CANCEL_DATE         DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT FK_RSVCAN_RSV FOREIGN KEY (RESERVATION_NO) REFERENCES TB_RESERVATION(RESERVATION_NO)
);

CREATE TABLE TB_REVIEW (
    REVIEW_NO       NUMBER              CONSTRAINT PK_TB_REVIEW PRIMARY KEY,
    RESERVATION_NO  NUMBER              NOT NULL,
    REVIEW_CONTENT  VARCHAR2(1000)      NOT NULL,
    STORE_GRADE     VARCHAR2(10)        NOT NULL,
    REVIEW_DATE     DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT FK_REVIEW_RSV FOREIGN KEY (RESERVATION_NO) REFERENCES TB_RESERVATION(RESERVATION_NO)
);

/* USER_NO FK 추가 */
ALTER TABLE TB_REVIEW 
ADD USER_NO NUMBER NOT NULL;

ALTER TABLE TB_REVIEW 
ADD CONSTRAINT FK_REVIEW_USER FOREIGN KEY (USER_NO) 
REFERENCES TB_USER(USER_NO);

COMMIT;
SELECT * FROM TB_REVIEW;

CREATE TABLE TB_REVIEW_IMAGE (
    IMAGE_NO    NUMBER              CONSTRAINT PK_TB_REVIEW_IMAGE PRIMARY KEY,
    REVIEW_NO   NUMBER              NOT NULL,
    IMAGE       VARCHAR2(300)       NOT NULL,
    CONSTRAINT FK_RIMG_REVIEW FOREIGN KEY (REVIEW_NO) REFERENCES TB_REVIEW(REVIEW_NO)
);

CREATE TABLE TB_REPORT (
    REPORT_NO       NUMBER              CONSTRAINT PK_TB_REPORT PRIMARY KEY,
    REVIEW_NO       NUMBER              NOT NULL,
    REPORT_CONTENT  VARCHAR2(300)       NOT NULL,
    STATUS          CHAR(1) DEFAULT 'N' NOT NULL,
    REPORT_DATE     DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT FK_REPORT_REVIEW FOREIGN KEY (REVIEW_NO) REFERENCES TB_REVIEW(REVIEW_NO)
);

/* ======================================================
   4. 공지사항 테이블
   ====================================================== */
CREATE TABLE TB_NOTICE (
    NOTICE_NO       NUMBER              CONSTRAINT PK_TB_NOTICE PRIMARY KEY,
    USER_NO         NUMBER              NOT NULL,
    NOTICE_TITLE    VARCHAR2(100)       NOT NULL,
    NOTICE_CONTENT  VARCHAR2(1000)      NOT NULL,
    CREATE_DATE     DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT FK_NOTICE_USER FOREIGN KEY (USER_NO) REFERENCES TB_USER(USER_NO)
);


SELECT * FROM TB_NOTICE;
SELECT * FROM TB_USER;

INSERT INTO TB_NOTICE (
    NOTICE_NO, USER_NO, NOTICE_TITLE, NOTICE_CONTENT, CREATE_DATE
) VALUES (
    1,
    7,
    '제목제목제',  
    '내용내용내용내용내용내용내용내용',
    SYSDATE  
);

ALTER TABLE TB_REVIEW ADD IS_DELETED CHAR(1) DEFAULT 'N' NOT NULL;

COMMIT;

SELECT * FROM TB_TOKEN;
SELECT * FROM TB_USER;

DROP SEQUENCE SEQ_NOTICE_NO;

CREATE SEQUENCE SEQ_NOTICE_NO
START WITH 11
INCREMENT BY 1
NOCACHE;

SELECT * FROM TB_NOTICE;

SELECT NOTICE_NO, NOTICE_TITLE FROM TB_NOTICE ORDER BY NOTICE_NO;

SELECT * FROM TB_STORE;

SELECT * FROM TB_REVIEW;

CREATE SEQUENCE SEQ_TB_REVIEW_NO
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
COMMIT;

SELECT * FROM TB_REVIEW;


CREATE SEQUENCE SEQ_REVIEW_NO
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


